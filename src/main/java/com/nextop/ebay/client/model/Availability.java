/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nextop.ebay.client.model.PickupAtLocationAvailability;
import com.nextop.ebay.client.model.ShipToLocationAvailability;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This type is used to specify the quantity of the inventory item that is available for purchase if the item will be shipped to the buyer, and the quantity of the inventory item that is available for In-Store Pickup at one or more of the merchant&#39;s physical stores. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
 */
@ApiModel(description = "This type is used to specify the quantity of the inventory item that is available for purchase if the item will be shipped to the buyer, and the quantity of the inventory item that is available for In-Store Pickup at one or more of the merchant's physical stores. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class Availability implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PICKUP_AT_LOCATION_AVAILABILITY = "pickupAtLocationAvailability";
  @SerializedName(SERIALIZED_NAME_PICKUP_AT_LOCATION_AVAILABILITY)
  private List<PickupAtLocationAvailability> pickupAtLocationAvailability = null;

  public static final String SERIALIZED_NAME_SHIP_TO_LOCATION_AVAILABILITY = "shipToLocationAvailability";
  @SerializedName(SERIALIZED_NAME_SHIP_TO_LOCATION_AVAILABILITY)
  private ShipToLocationAvailability shipToLocationAvailability;


  public Availability pickupAtLocationAvailability(List<PickupAtLocationAvailability> pickupAtLocationAvailability) {
    
    this.pickupAtLocationAvailability = pickupAtLocationAvailability;
    return this;
  }

  public Availability addPickupAtLocationAvailabilityItem(PickupAtLocationAvailability pickupAtLocationAvailabilityItem) {
    if (this.pickupAtLocationAvailability == null) {
      this.pickupAtLocationAvailability = new ArrayList<PickupAtLocationAvailability>();
    }
    this.pickupAtLocationAvailability.add(pickupAtLocationAvailabilityItem);
    return this;
  }

   /**
   * This container consists of an array of one or more of the merchant&#39;s physical store locations where the inventory item is available for In-Store Pickup orders. The merchant&#39;s location, the quantity available, and the fulfillment time (how soon the item will be ready for pickup after the order takes place) are all in this container. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.
   * @return pickupAtLocationAvailability
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "This container consists of an array of one or more of the merchant's physical store locations where the inventory item is available for In-Store Pickup orders. The merchant's location, the quantity available, and the fulfillment time (how soon the item will be ready for pickup after the order takes place) are all in this container. In-Store Pickup is only available to large merchants selling on the US, UK, Germany, and Australia sites.")

  public List<PickupAtLocationAvailability> getPickupAtLocationAvailability() {
    return pickupAtLocationAvailability;
  }


  public void setPickupAtLocationAvailability(List<PickupAtLocationAvailability> pickupAtLocationAvailability) {
    this.pickupAtLocationAvailability = pickupAtLocationAvailability;
  }


  public Availability shipToLocationAvailability(ShipToLocationAvailability shipToLocationAvailability) {
    
    this.shipToLocationAvailability = shipToLocationAvailability;
    return this;
  }

   /**
   * Get shipToLocationAvailability
   * @return shipToLocationAvailability
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public ShipToLocationAvailability getShipToLocationAvailability() {
    return shipToLocationAvailability;
  }


  public void setShipToLocationAvailability(ShipToLocationAvailability shipToLocationAvailability) {
    this.shipToLocationAvailability = shipToLocationAvailability;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Availability availability = (Availability) o;
    return Objects.equals(this.pickupAtLocationAvailability, availability.pickupAtLocationAvailability) &&
        Objects.equals(this.shipToLocationAvailability, availability.shipToLocationAvailability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pickupAtLocationAvailability, shipToLocationAvailability);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Availability {\n");
    sb.append("    pickupAtLocationAvailability: ").append(toIndentedString(pickupAtLocationAvailability)).append("\n");
    sb.append("    shipToLocationAvailability: ").append(toIndentedString(shipToLocationAvailability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

