/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nextop.ebay.client.model.Interval;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This type is used to express the special operating hours of a store location on a specific date. A &lt;strong&gt;specialHours&lt;/strong&gt; container is needed when the store&#39;s opening hours on a specific date are different than the normal operating hours on that particular day of the week.
 */
@ApiModel(description = "This type is used to express the special operating hours of a store location on a specific date. A <strong>specialHours</strong> container is needed when the store's opening hours on a specific date are different than the normal operating hours on that particular day of the week.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class SpecialHours implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_INTERVALS = "intervals";
  @SerializedName(SERIALIZED_NAME_INTERVALS)
  private List<Interval> intervals = null;


  public SpecialHours date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * A &lt;strong&gt;date&lt;/strong&gt; value is required for each specific date that the store location has special operating hours.  &lt;br&gt;&lt;br&gt;The timestamp is formatted as an &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html\&quot; title&#x3D;\&quot;https://www.iso.org\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601&lt;/a&gt; string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Format:&lt;/b&gt; &lt;code&gt;[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z&lt;/code&gt; &lt;br&gt;&lt;b&gt;Example:&lt;/b&gt; &lt;code&gt;2018-08-04T07:09:00.000Z&lt;/code&gt; &lt;br&gt;&lt;br&gt;This field is returned if set for the store location.
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A <strong>date</strong> value is required for each specific date that the store location has special operating hours.  <br><br>The timestamp is formatted as an <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\" title=\"https://www.iso.org\" target=\"_blank\">ISO 8601</a> string, which is based on the 24-hour Coordinated Universal Time (UTC) clock.  <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2018-08-04T07:09:00.000Z</code> <br><br>This field is returned if set for the store location.")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public SpecialHours intervals(List<Interval> intervals) {
    
    this.intervals = intervals;
    return this;
  }

  public SpecialHours addIntervalsItem(Interval intervalsItem) {
    if (this.intervals == null) {
      this.intervals = new ArrayList<Interval>();
    }
    this.intervals.add(intervalsItem);
    return this;
  }

   /**
   * This container is used to define the opening and closing times of a store on a specific date (defined in the &lt;strong&gt;date&lt;/strong&gt; field). An &lt;strong&gt;intervals&lt;/strong&gt; container is needed for each specific date that the store has special operating hours. These special operating hours on the specific date override the normal operating hours for the specific day of the week. If a store location closes for lunch (or any other period during the day) and then reopens, multiple &lt;strong&gt;open&lt;/strong&gt; and &lt;strong&gt;close&lt;/strong&gt; pairs are needed. &lt;br&gt;&lt;br&gt;This container is returned if set for the store location.
   * @return intervals
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "This container is used to define the opening and closing times of a store on a specific date (defined in the <strong>date</strong> field). An <strong>intervals</strong> container is needed for each specific date that the store has special operating hours. These special operating hours on the specific date override the normal operating hours for the specific day of the week. If a store location closes for lunch (or any other period during the day) and then reopens, multiple <strong>open</strong> and <strong>close</strong> pairs are needed. <br><br>This container is returned if set for the store location.")

  public List<Interval> getIntervals() {
    return intervals;
  }


  public void setIntervals(List<Interval> intervals) {
    this.intervals = intervals;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecialHours specialHours = (SpecialHours) o;
    return Objects.equals(this.date, specialHours.date) &&
        Objects.equals(this.intervals, specialHours.intervals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, intervals);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecialHours {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    intervals: ").append(toIndentedString(intervals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

