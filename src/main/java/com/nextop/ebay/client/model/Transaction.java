/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nextop.ebay.client.model.Amount;
import com.nextop.ebay.client.model.Buyer;
import com.nextop.ebay.client.model.FeeJurisdiction;
import com.nextop.ebay.client.model.OrderLineItem;
import com.nextop.ebay.client.model.Reference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This type is used to express the details of one of the following monetary transactions: a buyer&#39;s payment for an order, a refund to the buyer for a returned item or cancelled order, or a credit issued by eBay to the seller&#39;s account.
 */
@ApiModel(description = "This type is used to express the details of one of the following monetary transactions: a buyer's payment for an order, a refund to the buyer for a returned item or cancelled order, or a credit issued by eBay to the seller's account.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class Transaction implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_BOOKING_ENTRY = "bookingEntry";
  @SerializedName(SERIALIZED_NAME_BOOKING_ENTRY)
  private String bookingEntry;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private Buyer buyer;

  public static final String SERIALIZED_NAME_FEE_JURISDICTION = "feeJurisdiction";
  @SerializedName(SERIALIZED_NAME_FEE_JURISDICTION)
  private FeeJurisdiction feeJurisdiction;

  public static final String SERIALIZED_NAME_FEE_TYPE = "feeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private String feeType;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_LINE_ITEMS = "orderLineItems";
  @SerializedName(SERIALIZED_NAME_ORDER_LINE_ITEMS)
  private List<OrderLineItem> orderLineItems = null;

  public static final String SERIALIZED_NAME_PAYMENTS_ENTITY = "paymentsEntity";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_ENTITY)
  private String paymentsEntity;

  public static final String SERIALIZED_NAME_PAYOUT_ID = "payoutId";
  @SerializedName(SERIALIZED_NAME_PAYOUT_ID)
  private String payoutId;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<Reference> references = null;

  public static final String SERIALIZED_NAME_SALES_RECORD_REFERENCE = "salesRecordReference";
  @SerializedName(SERIALIZED_NAME_SALES_RECORD_REFERENCE)
  private String salesRecordReference;

  public static final String SERIALIZED_NAME_TOTAL_FEE_AMOUNT = "totalFeeAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_FEE_AMOUNT)
  private Amount totalFeeAmount;

  public static final String SERIALIZED_NAME_TOTAL_FEE_BASIS_AMOUNT = "totalFeeBasisAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_FEE_BASIS_AMOUNT)
  private Amount totalFeeBasisAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private String transactionDate;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_MEMO = "transactionMemo";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_MEMO)
  private String transactionMemo;

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  private String transactionStatus;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;


  public Transaction amount(Amount amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Amount getAmount() {
    return amount;
  }


  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public Transaction bookingEntry(String bookingEntry) {
    
    this.bookingEntry = bookingEntry;
    return this;
  }

   /**
   * The enumeration value returned in this field indicates if the monetary transaction amount is a (&lt;code&gt;CREDIT&lt;/code&gt;) or a (&lt;code&gt;DEBIT&lt;/code&gt;) to the seller&#39;s account. Typically, the &lt;code&gt;SALE&lt;/code&gt; and &lt;code&gt;CREDIT&lt;/code&gt; transaction types are credits to the seller&#39;s account, and the &lt;code&gt;REFUND&lt;/code&gt;, &lt;code&gt;DISPUTE&lt;/code&gt;, &lt;code&gt;SHIPPING_LABEL&lt;/code&gt;, and &lt;code&gt;TRANSFER&lt;/code&gt; transaction types are debits to the seller&#39;s account. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return bookingEntry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The enumeration value returned in this field indicates if the monetary transaction amount is a (<code>CREDIT</code>) or a (<code>DEBIT</code>) to the seller's account. Typically, the <code>SALE</code> and <code>CREDIT</code> transaction types are credits to the seller's account, and the <code>REFUND</code>, <code>DISPUTE</code>, <code>SHIPPING_LABEL</code>, and <code>TRANSFER</code> transaction types are debits to the seller's account. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>")

  public String getBookingEntry() {
    return bookingEntry;
  }


  public void setBookingEntry(String bookingEntry) {
    this.bookingEntry = bookingEntry;
  }


  public Transaction buyer(Buyer buyer) {
    
    this.buyer = buyer;
    return this;
  }

   /**
   * Get buyer
   * @return buyer
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Buyer getBuyer() {
    return buyer;
  }


  public void setBuyer(Buyer buyer) {
    this.buyer = buyer;
  }


  public Transaction feeJurisdiction(FeeJurisdiction feeJurisdiction) {
    
    this.feeJurisdiction = feeJurisdiction;
    return this;
  }

   /**
   * Get feeJurisdiction
   * @return feeJurisdiction
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public FeeJurisdiction getFeeJurisdiction() {
    return feeJurisdiction;
  }


  public void setFeeJurisdiction(FeeJurisdiction feeJurisdiction) {
    this.feeJurisdiction = feeJurisdiction;
  }


  public Transaction feeType(String feeType) {
    
    this.feeType = feeType;
    return this;
  }

   /**
   * The type of fee. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/finances/types/api:FeeTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return feeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of fee. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/api:FeeTypeEnum'>eBay API documentation</a>")

  public String getFeeType() {
    return feeType;
  }


  public void setFeeType(String feeType) {
    this.feeType = feeType;
  }


  public Transaction orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * The unique identifier of the eBay order associated with the monetary transaction.
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of the eBay order associated with the monetary transaction.")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Transaction orderLineItems(List<OrderLineItem> orderLineItems) {
    
    this.orderLineItems = orderLineItems;
    return this;
  }

  public Transaction addOrderLineItemsItem(OrderLineItem orderLineItemsItem) {
    if (this.orderLineItems == null) {
      this.orderLineItems = new ArrayList<OrderLineItem>();
    }
    this.orderLineItems.add(orderLineItemsItem);
    return this;
  }

   /**
   * This array shows the fees that are deducted from a seller payout for each line item in an order.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; In some cases, a transaction fee might be returned asynchronously from the associated order. In such cases, you can determine the order to which the fee applies by examining the referenceID value of the fee, which should match the ID of the order.
   * @return orderLineItems
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "This array shows the fees that are deducted from a seller payout for each line item in an order.<br /><br /><span class=\"tablenote\"><strong>Note:</strong> In some cases, a transaction fee might be returned asynchronously from the associated order. In such cases, you can determine the order to which the fee applies by examining the referenceID value of the fee, which should match the ID of the order.")

  public List<OrderLineItem> getOrderLineItems() {
    return orderLineItems;
  }


  public void setOrderLineItems(List<OrderLineItem> orderLineItems) {
    this.orderLineItems = orderLineItems;
  }


  public Transaction paymentsEntity(String paymentsEntity) {
    
    this.paymentsEntity = paymentsEntity;
    return this;
  }

   /**
   * This string value indicates the entity that is processing  the payment.
   * @return paymentsEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This string value indicates the entity that is processing  the payment.")

  public String getPaymentsEntity() {
    return paymentsEntity;
  }


  public void setPaymentsEntity(String paymentsEntity) {
    this.paymentsEntity = paymentsEntity;
  }


  public Transaction payoutId(String payoutId) {
    
    this.payoutId = payoutId;
    return this;
  }

   /**
   * The unique identifier of the seller payout associated with the monetary transaction. This identifier is generated once eBay begins processing the payout for the corresponding order. This field will not be returned if eBay has not yet begun processing the payout for an order.
   * @return payoutId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of the seller payout associated with the monetary transaction. This identifier is generated once eBay begins processing the payout for the corresponding order. This field will not be returned if eBay has not yet begun processing the payout for an order.")

  public String getPayoutId() {
    return payoutId;
  }


  public void setPayoutId(String payoutId) {
    this.payoutId = payoutId;
  }


  public Transaction references(List<Reference> references) {
    
    this.references = references;
    return this;
  }

  public Transaction addReferencesItem(Reference referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<Reference>();
    }
    this.references.add(referencesItem);
    return this;
  }

   /**
   * This field contains reference information for the transaction fee. This includes an ID and the type of ID provided (such as item ID).
   * @return references
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "This field contains reference information for the transaction fee. This includes an ID and the type of ID provided (such as item ID).")

  public List<Reference> getReferences() {
    return references;
  }


  public void setReferences(List<Reference> references) {
    this.references = references;
  }


  public Transaction salesRecordReference(String salesRecordReference) {
    
    this.salesRecordReference = salesRecordReference;
    return this;
  }

   /**
   * The Sales Record Number associated with a sales order. Sales Record Numbers are Selling Manager/Selling Manager Pro identifiers that are created at order checkout.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; For all orders originating after February 1, 2020, a value of &lt;code&gt;0&lt;/code&gt; will be returned in this field. The Sales Record Number field has also been removed from Seller Hub. Instead of &lt;strong&gt;salesRecordReference&lt;/strong&gt;, depend on &lt;strong&gt;orderId&lt;/strong&gt; instead as the identifier of the order. The &lt;strong&gt;salesRecordReference&lt;/strong&gt; field has been scheduled for deprecation, and a date for when this field will no longer be returned at all will be announced soon.&lt;/span&gt;
   * @return salesRecordReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Sales Record Number associated with a sales order. Sales Record Numbers are Selling Manager/Selling Manager Pro identifiers that are created at order checkout.<br/><br/><span class=\"tablenote\"><strong>Note:</strong> For all orders originating after February 1, 2020, a value of <code>0</code> will be returned in this field. The Sales Record Number field has also been removed from Seller Hub. Instead of <strong>salesRecordReference</strong>, depend on <strong>orderId</strong> instead as the identifier of the order. The <strong>salesRecordReference</strong> field has been scheduled for deprecation, and a date for when this field will no longer be returned at all will be announced soon.</span>")

  public String getSalesRecordReference() {
    return salesRecordReference;
  }


  public void setSalesRecordReference(String salesRecordReference) {
    this.salesRecordReference = salesRecordReference;
  }


  public Transaction totalFeeAmount(Amount totalFeeAmount) {
    
    this.totalFeeAmount = totalFeeAmount;
    return this;
  }

   /**
   * Get totalFeeAmount
   * @return totalFeeAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Amount getTotalFeeAmount() {
    return totalFeeAmount;
  }


  public void setTotalFeeAmount(Amount totalFeeAmount) {
    this.totalFeeAmount = totalFeeAmount;
  }


  public Transaction totalFeeBasisAmount(Amount totalFeeBasisAmount) {
    
    this.totalFeeBasisAmount = totalFeeBasisAmount;
    return this;
  }

   /**
   * Get totalFeeBasisAmount
   * @return totalFeeBasisAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Amount getTotalFeeBasisAmount() {
    return totalFeeBasisAmount;
  }


  public void setTotalFeeBasisAmount(Amount totalFeeBasisAmount) {
    this.totalFeeBasisAmount = totalFeeBasisAmount;
  }


  public Transaction transactionDate(String transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * This timestamp indicates when the monetary transaction (order purchase, buyer refund, seller credit) occurred. The following (UTC) format is used: &lt;code&gt;YYYY-MM-DDTHH:MM:SS.SSSZ&lt;/code&gt;. For example, &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;.
   * @return transactionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This timestamp indicates when the monetary transaction (order purchase, buyer refund, seller credit) occurred. The following (UTC) format is used: <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>. For example, <code>2015-08-04T19:09:02.768Z</code>.")

  public String getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(String transactionDate) {
    this.transactionDate = transactionDate;
  }


  public Transaction transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The unique identifier of the monetary transaction. A monetary transaction can be a sales order, an order refund to the buyer, a credit to the seller&#39;s account, a debit to the seller for the purchase of a shipping label, or a transaction where eBay recouped money from the seller if the seller lost a buyer-initiated payment dispute.
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of the monetary transaction. A monetary transaction can be a sales order, an order refund to the buyer, a credit to the seller's account, a debit to the seller for the purchase of a shipping label, or a transaction where eBay recouped money from the seller if the seller lost a buyer-initiated payment dispute.")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Transaction transactionMemo(String transactionMemo) {
    
    this.transactionMemo = transactionMemo;
    return this;
  }

   /**
   * This field provides more details on shipping label transactions and transactions where the funds are being held by eBay. For shipping label transactions, the &lt;b&gt;transactionMemo&lt;/b&gt; gives details about a purchase, a refund, or a price adjustment to the cost of the shipping label. For on-hold transactions, the &lt;b&gt;transactionMemo&lt;/b&gt; provides information on the reason for the hold or when the hold will be released (e.g., \&quot;Funds on hold. Estimated release on Jun 1\&quot;).&lt;br/&gt;&lt;br/&gt;This field is only returned if applicable/available.
   * @return transactionMemo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field provides more details on shipping label transactions and transactions where the funds are being held by eBay. For shipping label transactions, the <b>transactionMemo</b> gives details about a purchase, a refund, or a price adjustment to the cost of the shipping label. For on-hold transactions, the <b>transactionMemo</b> provides information on the reason for the hold or when the hold will be released (e.g., \"Funds on hold. Estimated release on Jun 1\").<br/><br/>This field is only returned if applicable/available.")

  public String getTransactionMemo() {
    return transactionMemo;
  }


  public void setTransactionMemo(String transactionMemo) {
    this.transactionMemo = transactionMemo;
  }


  public Transaction transactionStatus(String transactionStatus) {
    
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * This enumeration value indicates the current status of the seller payout associated with the monetary transaction. See the &lt;code&gt;TransactionStatusEnum&lt;/code&gt; type for more information on the different states. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionStatusEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return transactionStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This enumeration value indicates the current status of the seller payout associated with the monetary transaction. See the <code>TransactionStatusEnum</code> type for more information on the different states. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionStatusEnum'>eBay API documentation</a>")

  public String getTransactionStatus() {
    return transactionStatus;
  }


  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public Transaction transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * This enumeration value indicates the type of monetary transaction. Examples of monetary transactions include a buyer&#39;s payment for an order, a refund to the buyer for a returned item or cancelled order, or a credit issued by eBay to the seller&#39;s account. For a complete list of monetary transaction types within the &lt;strong&gt;Finances API&lt;/strong&gt;, see the &lt;a href&#x3D;\&quot;/api-docs/sell/finances/types/pay:TransactionTypeEnum\&quot;&gt;TransactionTypeEnum&lt;/a&gt; type. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return transactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This enumeration value indicates the type of monetary transaction. Examples of monetary transactions include a buyer's payment for an order, a refund to the buyer for a returned item or cancelled order, or a credit issued by eBay to the seller's account. For a complete list of monetary transaction types within the <strong>Finances API</strong>, see the <a href=\"/api-docs/sell/finances/types/pay:TransactionTypeEnum\">TransactionTypeEnum</a> type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionTypeEnum'>eBay API documentation</a>")

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.bookingEntry, transaction.bookingEntry) &&
        Objects.equals(this.buyer, transaction.buyer) &&
        Objects.equals(this.feeJurisdiction, transaction.feeJurisdiction) &&
        Objects.equals(this.feeType, transaction.feeType) &&
        Objects.equals(this.orderId, transaction.orderId) &&
        Objects.equals(this.orderLineItems, transaction.orderLineItems) &&
        Objects.equals(this.paymentsEntity, transaction.paymentsEntity) &&
        Objects.equals(this.payoutId, transaction.payoutId) &&
        Objects.equals(this.references, transaction.references) &&
        Objects.equals(this.salesRecordReference, transaction.salesRecordReference) &&
        Objects.equals(this.totalFeeAmount, transaction.totalFeeAmount) &&
        Objects.equals(this.totalFeeBasisAmount, transaction.totalFeeBasisAmount) &&
        Objects.equals(this.transactionDate, transaction.transactionDate) &&
        Objects.equals(this.transactionId, transaction.transactionId) &&
        Objects.equals(this.transactionMemo, transaction.transactionMemo) &&
        Objects.equals(this.transactionStatus, transaction.transactionStatus) &&
        Objects.equals(this.transactionType, transaction.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, bookingEntry, buyer, feeJurisdiction, feeType, orderId, orderLineItems, paymentsEntity, payoutId, references, salesRecordReference, totalFeeAmount, totalFeeBasisAmount, transactionDate, transactionId, transactionMemo, transactionStatus, transactionType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    bookingEntry: ").append(toIndentedString(bookingEntry)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    feeJurisdiction: ").append(toIndentedString(feeJurisdiction)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderLineItems: ").append(toIndentedString(orderLineItems)).append("\n");
    sb.append("    paymentsEntity: ").append(toIndentedString(paymentsEntity)).append("\n");
    sb.append("    payoutId: ").append(toIndentedString(payoutId)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    salesRecordReference: ").append(toIndentedString(salesRecordReference)).append("\n");
    sb.append("    totalFeeAmount: ").append(toIndentedString(totalFeeAmount)).append("\n");
    sb.append("    totalFeeBasisAmount: ").append(toIndentedString(totalFeeBasisAmount)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionMemo: ").append(toIndentedString(transactionMemo)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

