/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This type provides details about the seller&#39;s account that received (or is scheduled to receive) a payout.
 */
@ApiModel(description = "This type provides details about the seller's account that received (or is scheduled to receive) a payout.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class PayoutInstrument implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ACCOUNT_LAST_FOUR_DIGITS = "accountLastFourDigits";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_LAST_FOUR_DIGITS)
  private String accountLastFourDigits;

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private String instrumentType;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;


  public PayoutInstrument accountLastFourDigits(String accountLastFourDigits) {
    
    this.accountLastFourDigits = accountLastFourDigits;
    return this;
  }

   /**
   * This value is the last four digits of the account that the seller uses to receive the payout. This may be the last four digits of a bank account or of a payment processor account such as Payoneer.
   * @return accountLastFourDigits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This value is the last four digits of the account that the seller uses to receive the payout. This may be the last four digits of a bank account or of a payment processor account such as Payoneer.")

  public String getAccountLastFourDigits() {
    return accountLastFourDigits;
  }


  public void setAccountLastFourDigits(String accountLastFourDigits) {
    this.accountLastFourDigits = accountLastFourDigits;
  }


  public PayoutInstrument instrumentType(String instrumentType) {
    
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * This value indicates the type of account that received the payout. The value returned in this field is &lt;code&gt;BANK&lt;/code&gt; if the payout is going to a seller&#39;s bank account. Alternatively, the value can be the name of a digital wallet provider or payment processor such as &lt;code&gt;PAYONEER&lt;/code&gt;.
   * @return instrumentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This value indicates the type of account that received the payout. The value returned in this field is <code>BANK</code> if the payout is going to a seller's bank account. Alternatively, the value can be the name of a digital wallet provider or payment processor such as <code>PAYONEER</code>.")

  public String getInstrumentType() {
    return instrumentType;
  }


  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }


  public PayoutInstrument nickname(String nickname) {
    
    this.nickname = nickname;
    return this;
  }

   /**
   * If the payout instrument type is a bank, this value is a seller-provided nickname that the seller uses to represent the bank account that receives the payout. If the payout instrument is a provider of digital wallet or payment processing services, the value returned is the name of the service provider (for example, &#39;PAYONEER&#39;).
   * @return nickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the payout instrument type is a bank, this value is a seller-provided nickname that the seller uses to represent the bank account that receives the payout. If the payout instrument is a provider of digital wallet or payment processing services, the value returned is the name of the service provider (for example, 'PAYONEER').")

  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayoutInstrument payoutInstrument = (PayoutInstrument) o;
    return Objects.equals(this.accountLastFourDigits, payoutInstrument.accountLastFourDigits) &&
        Objects.equals(this.instrumentType, payoutInstrument.instrumentType) &&
        Objects.equals(this.nickname, payoutInstrument.nickname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountLastFourDigits, instrumentType, nickname);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayoutInstrument {\n");
    sb.append("    accountLastFourDigits: ").append(toIndentedString(accountLastFourDigits)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

