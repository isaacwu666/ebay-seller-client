/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nextop.ebay.client.model.Charity;
import com.nextop.ebay.client.model.ExtendedProducerResponsibility;
import com.nextop.ebay.client.model.ListingPolicies;
import com.nextop.ebay.client.model.PricingSummary;
import com.nextop.ebay.client.model.Tax;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This type provides details of an offer, and is used by the base request payload of the &lt;strong&gt;updateOffer&lt;/strong&gt; call. Every field that is currently set with the unpublished/published offer must also be passed into the &lt;strong&gt;updateOffer&lt;/strong&gt; call, even those fields whose values are not changing. Note that for published offers, a successful &lt;strong&gt;updateOffer&lt;/strong&gt; call will actually update the active eBay listing with whatever changes were made.
 */
@ApiModel(description = "This type provides details of an offer, and is used by the base request payload of the <strong>updateOffer</strong> call. Every field that is currently set with the unpublished/published offer must also be passed into the <strong>updateOffer</strong> call, even those fields whose values are not changing. Note that for published offers, a successful <strong>updateOffer</strong> call will actually update the active eBay listing with whatever changes were made.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class EbayOfferDetailsWithId implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "availableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CHARITY = "charity";
  @SerializedName(SERIALIZED_NAME_CHARITY)
  private Charity charity;

  public static final String SERIALIZED_NAME_EXTENDED_PRODUCER_RESPONSIBILITY = "extendedProducerResponsibility";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PRODUCER_RESPONSIBILITY)
  private ExtendedProducerResponsibility extendedProducerResponsibility;

  public static final String SERIALIZED_NAME_HIDE_BUYER_DETAILS = "hideBuyerDetails";
  @SerializedName(SERIALIZED_NAME_HIDE_BUYER_DETAILS)
  private Boolean hideBuyerDetails;

  public static final String SERIALIZED_NAME_INCLUDE_CATALOG_PRODUCT_DETAILS = "includeCatalogProductDetails";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CATALOG_PRODUCT_DETAILS)
  private Boolean includeCatalogProductDetails;

  public static final String SERIALIZED_NAME_LISTING_DESCRIPTION = "listingDescription";
  @SerializedName(SERIALIZED_NAME_LISTING_DESCRIPTION)
  private String listingDescription;

  public static final String SERIALIZED_NAME_LISTING_DURATION = "listingDuration";
  @SerializedName(SERIALIZED_NAME_LISTING_DURATION)
  private String listingDuration;

  public static final String SERIALIZED_NAME_LISTING_POLICIES = "listingPolicies";
  @SerializedName(SERIALIZED_NAME_LISTING_POLICIES)
  private ListingPolicies listingPolicies;

  public static final String SERIALIZED_NAME_LISTING_START_DATE = "listingStartDate";
  @SerializedName(SERIALIZED_NAME_LISTING_START_DATE)
  private String listingStartDate;

  public static final String SERIALIZED_NAME_LOT_SIZE = "lotSize";
  @SerializedName(SERIALIZED_NAME_LOT_SIZE)
  private Integer lotSize;

  public static final String SERIALIZED_NAME_MERCHANT_LOCATION_KEY = "merchantLocationKey";
  @SerializedName(SERIALIZED_NAME_MERCHANT_LOCATION_KEY)
  private String merchantLocationKey;

  public static final String SERIALIZED_NAME_PRICING_SUMMARY = "pricingSummary";
  @SerializedName(SERIALIZED_NAME_PRICING_SUMMARY)
  private PricingSummary pricingSummary;

  public static final String SERIALIZED_NAME_QUANTITY_LIMIT_PER_BUYER = "quantityLimitPerBuyer";
  @SerializedName(SERIALIZED_NAME_QUANTITY_LIMIT_PER_BUYER)
  private Integer quantityLimitPerBuyer;

  public static final String SERIALIZED_NAME_SECONDARY_CATEGORY_ID = "secondaryCategoryId";
  @SerializedName(SERIALIZED_NAME_SECONDARY_CATEGORY_ID)
  private String secondaryCategoryId;

  public static final String SERIALIZED_NAME_STORE_CATEGORY_NAMES = "storeCategoryNames";
  @SerializedName(SERIALIZED_NAME_STORE_CATEGORY_NAMES)
  private List<String> storeCategoryNames = null;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Tax tax;


  public EbayOfferDetailsWithId availableQuantity(Integer availableQuantity) {
    
    this.availableQuantity = availableQuantity;
    return this;
  }

   /**
   * This integer value sets the quantity of the inventory item that will be available through the offer. Quantity must be set to &lt;code&gt;1&lt;/code&gt; or more in order for the inventory item to be purchasable. This value should not be more than the quantity that is specified for the inventory item record. For auction listings, this value must be &lt;code&gt;1&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt;If this field exists for the current unpublished or published offer, it should be provided again in the &lt;strong&gt;updateOffer&lt;/strong&gt; call, even if the value is not changing. If this particular field is omitted in an &lt;strong&gt;updateOffer&lt;/strong&gt; call, the general available quantity set for the inventory item record may be used instead, and this may not be accurate if the inventory item is being sold across multiple marketplaces.
   * @return availableQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This integer value sets the quantity of the inventory item that will be available through the offer. Quantity must be set to <code>1</code> or more in order for the inventory item to be purchasable. This value should not be more than the quantity that is specified for the inventory item record. For auction listings, this value must be <code>1</code>. <br/><br/>If this field exists for the current unpublished or published offer, it should be provided again in the <strong>updateOffer</strong> call, even if the value is not changing. If this particular field is omitted in an <strong>updateOffer</strong> call, the general available quantity set for the inventory item record may be used instead, and this may not be accurate if the inventory item is being sold across multiple marketplaces.")

  public Integer getAvailableQuantity() {
    return availableQuantity;
  }


  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public EbayOfferDetailsWithId categoryId(String categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * The unique identifier of the eBay category that the inventory item is/will be listed under. This field is not immediately required for an unpublished offer, but will be required before publishing the offer. Sellers can use the &lt;a href&#x3D;\&quot;https://developer.ebay.com/api-docs/commerce/taxonomy/resources/category_tree/methods/getCategorySuggestions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCategorySuggestions&lt;/a&gt; method of the Taxonomy API to retrieve suggested category ID values. The seller passes in a query string like \&quot;&lt;em&gt;iPhone 6&lt;/em&gt;\&quot;, and category ID values for suggested categories are returned in the response.&lt;br/&gt;&lt;br/&gt;If this field exists for the current unpublished offer, it should be provided again in the &lt;strong&gt;updateOffer&lt;/strong&gt; call, even if the eBay category is not changing. For a published offer (aka active eBay listing), this field must be provided or an error may occur. The eBay category of an active eBay listing cannot be changed once the listing has one or more sales, or if the listing is scheduled to end in less than 12 hours.
   * @return categoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of the eBay category that the inventory item is/will be listed under. This field is not immediately required for an unpublished offer, but will be required before publishing the offer. Sellers can use the <a href=\"https://developer.ebay.com/api-docs/commerce/taxonomy/resources/category_tree/methods/getCategorySuggestions\" target=\"_blank\">getCategorySuggestions</a> method of the Taxonomy API to retrieve suggested category ID values. The seller passes in a query string like \"<em>iPhone 6</em>\", and category ID values for suggested categories are returned in the response.<br/><br/>If this field exists for the current unpublished offer, it should be provided again in the <strong>updateOffer</strong> call, even if the eBay category is not changing. For a published offer (aka active eBay listing), this field must be provided or an error may occur. The eBay category of an active eBay listing cannot be changed once the listing has one or more sales, or if the listing is scheduled to end in less than 12 hours.")

  public String getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public EbayOfferDetailsWithId charity(Charity charity) {
    
    this.charity = charity;
    return this;
  }

   /**
   * Get charity
   * @return charity
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Charity getCharity() {
    return charity;
  }


  public void setCharity(Charity charity) {
    this.charity = charity;
  }


  public EbayOfferDetailsWithId extendedProducerResponsibility(ExtendedProducerResponsibility extendedProducerResponsibility) {
    
    this.extendedProducerResponsibility = extendedProducerResponsibility;
    return this;
  }

   /**
   * Get extendedProducerResponsibility
   * @return extendedProducerResponsibility
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public ExtendedProducerResponsibility getExtendedProducerResponsibility() {
    return extendedProducerResponsibility;
  }


  public void setExtendedProducerResponsibility(ExtendedProducerResponsibility extendedProducerResponsibility) {
    this.extendedProducerResponsibility = extendedProducerResponsibility;
  }


  public EbayOfferDetailsWithId hideBuyerDetails(Boolean hideBuyerDetails) {
    
    this.hideBuyerDetails = hideBuyerDetails;
    return this;
  }

   /**
   * This field is included and set to &lt;code&gt;true&lt;/code&gt; if the seller wishes to update a published or unpublished offer with the private listing feature. Alternatively, the seller could also remove the private listing feature (if already set for a published or unpublished offer) by including this field and setting it to &lt;code&gt;false&lt;/code&gt;. &lt;br&gt;&lt;br&gt; Sellers may want to use this option when they believe that a listing&#39;s potential bidders/buyers would not want their obfuscated user IDs (and feedback scores) exposed to other users.
   * @return hideBuyerDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field is included and set to <code>true</code> if the seller wishes to update a published or unpublished offer with the private listing feature. Alternatively, the seller could also remove the private listing feature (if already set for a published or unpublished offer) by including this field and setting it to <code>false</code>. <br><br> Sellers may want to use this option when they believe that a listing's potential bidders/buyers would not want their obfuscated user IDs (and feedback scores) exposed to other users.")

  public Boolean getHideBuyerDetails() {
    return hideBuyerDetails;
  }


  public void setHideBuyerDetails(Boolean hideBuyerDetails) {
    this.hideBuyerDetails = hideBuyerDetails;
  }


  public EbayOfferDetailsWithId includeCatalogProductDetails(Boolean includeCatalogProductDetails) {
    
    this.includeCatalogProductDetails = includeCatalogProductDetails;
    return this;
  }

   /**
   * This field indicates whether or not eBay product catalog details are applied to a listing. A value of &lt;code&gt;true&lt;/code&gt; indicates the listing corresponds to the eBay product associated with the provided product identifier. The product identifier is provided in &lt;strong&gt;createOrReplaceInventoryItem&lt;/strong&gt;.&lt;p&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Though the &lt;strong&gt;includeCatalogProductDetails&lt;/strong&gt; parameter is not required to be submitted in the request, the parameter defaults to &#39;true&#39; if omitted.&lt;/span&gt;&lt;/p&gt;
   * @return includeCatalogProductDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field indicates whether or not eBay product catalog details are applied to a listing. A value of <code>true</code> indicates the listing corresponds to the eBay product associated with the provided product identifier. The product identifier is provided in <strong>createOrReplaceInventoryItem</strong>.<p><span class=\"tablenote\"><strong>Note:</strong> Though the <strong>includeCatalogProductDetails</strong> parameter is not required to be submitted in the request, the parameter defaults to 'true' if omitted.</span></p>")

  public Boolean getIncludeCatalogProductDetails() {
    return includeCatalogProductDetails;
  }


  public void setIncludeCatalogProductDetails(Boolean includeCatalogProductDetails) {
    this.includeCatalogProductDetails = includeCatalogProductDetails;
  }


  public EbayOfferDetailsWithId listingDescription(String listingDescription) {
    
    this.listingDescription = listingDescription;
    return this;
  }

   /**
   * The text in this field is (published offers), or will become (unpublished offers) the description of the eBay listing. This field is not immediately required for an unpublished offer, but will be required before publishing the offer. Note that if the &lt;strong&gt;listingDescription&lt;/strong&gt; field was omitted in the &lt;strong&gt;createOffer&lt;/strong&gt; call for the offer, the offer entity should have picked up the text provided in the &lt;strong&gt;product.description&lt;/strong&gt; field of the inventory item record, or if the inventory item is part of a group, the offer entity should have picked up the text provided in the &lt;strong&gt;description&lt;/strong&gt; field of the inventory item group record.&lt;br/&gt;&lt;br/&gt;HTML tags and markup can be used in listing descriptions, but each character counts toward the max length limit.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; To ensure that their short listing description is optimized when viewed on mobile devices, sellers should strongly consider using eBay&#39;s &lt;a href&#x3D;\&quot;https://pages.ebay.com/sell/itemdescription/customizeyoursummary.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;View Item description summary feature&lt;/a&gt; when listing their items. Keep in mind that the &#39;short&#39; listing description is what prospective buyers first see when they view the listing on a mobile device. The &#39;full&#39; listing description is also available to mobile users when they click on the short listing description, but the full description is not automatically optimized for viewing in mobile devices, and many users won&#39;t even drill down to the full description.&lt;br&gt;&lt;br&gt; Using HTML div and span tag attributes, this feature allows sellers to customize and fully control the short listing description that is displayed to prospective buyers when viewing the listing on a mobile device. The short listing description on mobile devices is limited to 800 characters, and whenever the full listing description (provided in this field, in UI, or seller tool) exceeds this limit, eBay uses a special algorithm to derive the best possible short listing description within the 800-character limit. However, due to some short listing description content being removed, it is definitely not ideal for the seller, and could lead to a bad buyer experience and possibly to a Significantly not as described (SNAD) case, since the buyer may not get complete details on the item when viewing the short listing description. See the eBay help page for more details on using the HTML div and span tags.&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;If this field exists for the current unpublished offer, it should be provided again in the &lt;strong&gt;updateOffer&lt;/strong&gt; call, even if the text is not changing. For a published offer (aka active eBay listing), this field must be provided or an error may occur.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Max length&lt;/strong&gt;: 500000 (which includes HTML markup/tags)
   * @return listingDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The text in this field is (published offers), or will become (unpublished offers) the description of the eBay listing. This field is not immediately required for an unpublished offer, but will be required before publishing the offer. Note that if the <strong>listingDescription</strong> field was omitted in the <strong>createOffer</strong> call for the offer, the offer entity should have picked up the text provided in the <strong>product.description</strong> field of the inventory item record, or if the inventory item is part of a group, the offer entity should have picked up the text provided in the <strong>description</strong> field of the inventory item group record.<br/><br/>HTML tags and markup can be used in listing descriptions, but each character counts toward the max length limit.<br/><br/><span class=\"tablenote\"> <strong>Note:</strong> To ensure that their short listing description is optimized when viewed on mobile devices, sellers should strongly consider using eBay's <a href=\"https://pages.ebay.com/sell/itemdescription/customizeyoursummary.html\" target=\"_blank\">View Item description summary feature</a> when listing their items. Keep in mind that the 'short' listing description is what prospective buyers first see when they view the listing on a mobile device. The 'full' listing description is also available to mobile users when they click on the short listing description, but the full description is not automatically optimized for viewing in mobile devices, and many users won't even drill down to the full description.<br><br> Using HTML div and span tag attributes, this feature allows sellers to customize and fully control the short listing description that is displayed to prospective buyers when viewing the listing on a mobile device. The short listing description on mobile devices is limited to 800 characters, and whenever the full listing description (provided in this field, in UI, or seller tool) exceeds this limit, eBay uses a special algorithm to derive the best possible short listing description within the 800-character limit. However, due to some short listing description content being removed, it is definitely not ideal for the seller, and could lead to a bad buyer experience and possibly to a Significantly not as described (SNAD) case, since the buyer may not get complete details on the item when viewing the short listing description. See the eBay help page for more details on using the HTML div and span tags.</span><br/><br/>If this field exists for the current unpublished offer, it should be provided again in the <strong>updateOffer</strong> call, even if the text is not changing. For a published offer (aka active eBay listing), this field must be provided or an error may occur.<br><br><strong>Max length</strong>: 500000 (which includes HTML markup/tags)")

  public String getListingDescription() {
    return listingDescription;
  }


  public void setListingDescription(String listingDescription) {
    this.listingDescription = listingDescription;
  }


  public EbayOfferDetailsWithId listingDuration(String listingDuration) {
    
    this.listingDuration = listingDuration;
    return this;
  }

   /**
   * This field indicates the number of days that the listing will be active. For fixed-price listings, this value must be set to &lt;code&gt;GTC&lt;/code&gt;, but auction listings support different listing durations.&lt;br /&gt;&lt;br /&gt; The GTC (Good &#39;Til Cancelled) listings are automatically renewed each calendar month until the seller decides to end the listing.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; If the listing duration expires for an auction offer without a winning bidder, the listing then becomes available as a fixed-price offer and listing duration will be &lt;code&gt;GTC&lt;/code&gt;.&lt;/span&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/inventory/types/slr:ListingDurationEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return listingDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field indicates the number of days that the listing will be active. For fixed-price listings, this value must be set to <code>GTC</code>, but auction listings support different listing durations.<br /><br /> The GTC (Good 'Til Cancelled) listings are automatically renewed each calendar month until the seller decides to end the listing.<br /><br /><span class=\"tablenote\"> <strong>Note:</strong> If the listing duration expires for an auction offer without a winning bidder, the listing then becomes available as a fixed-price offer and listing duration will be <code>GTC</code>.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/inventory/types/slr:ListingDurationEnum'>eBay API documentation</a>")

  public String getListingDuration() {
    return listingDuration;
  }


  public void setListingDuration(String listingDuration) {
    this.listingDuration = listingDuration;
  }


  public EbayOfferDetailsWithId listingPolicies(ListingPolicies listingPolicies) {
    
    this.listingPolicies = listingPolicies;
    return this;
  }

   /**
   * Get listingPolicies
   * @return listingPolicies
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public ListingPolicies getListingPolicies() {
    return listingPolicies;
  }


  public void setListingPolicies(ListingPolicies listingPolicies) {
    this.listingPolicies = listingPolicies;
  }


  public EbayOfferDetailsWithId listingStartDate(String listingStartDate) {
    
    this.listingStartDate = listingStartDate;
    return this;
  }

   /**
   * This field can be used with an unpublished offer if the seller wants to specify a time in the future that the listing will become active on eBay. The timestamp supplied in this field should be in UTC format, and it should be far enough in the future so that the seller will have enough time to publish the listing with the &lt;strong&gt;publishOffer&lt;/strong&gt; method.&lt;br&gt;&lt;br&gt; This field is optional, and it doesn&#39;t apply to offers where the corresponding listing is already active. If this field is not provided, the listing starts immediately after a successful &lt;strong&gt;publishOffer&lt;/strong&gt; method.
   * @return listingStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field can be used with an unpublished offer if the seller wants to specify a time in the future that the listing will become active on eBay. The timestamp supplied in this field should be in UTC format, and it should be far enough in the future so that the seller will have enough time to publish the listing with the <strong>publishOffer</strong> method.<br><br> This field is optional, and it doesn't apply to offers where the corresponding listing is already active. If this field is not provided, the listing starts immediately after a successful <strong>publishOffer</strong> method.")

  public String getListingStartDate() {
    return listingStartDate;
  }


  public void setListingStartDate(String listingStartDate) {
    this.listingStartDate = listingStartDate;
  }


  public EbayOfferDetailsWithId lotSize(Integer lotSize) {
    
    this.lotSize = lotSize;
    return this;
  }

   /**
   * This field is only applicable if the listing is a lot listing. A lot listing is a listing that has multiple quantity of the same item, such as four identical tires being sold as a single offer, or it can be a mixed lot of similar items, such as used clothing items or an assortment of baseball cards. Whether the lot listing involved identical items or a mixed lot, the integer value passed into this field is the total number of items in the lot. Lots can be used for auction and fixed-price listings.
   * @return lotSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field is only applicable if the listing is a lot listing. A lot listing is a listing that has multiple quantity of the same item, such as four identical tires being sold as a single offer, or it can be a mixed lot of similar items, such as used clothing items or an assortment of baseball cards. Whether the lot listing involved identical items or a mixed lot, the integer value passed into this field is the total number of items in the lot. Lots can be used for auction and fixed-price listings.")

  public Integer getLotSize() {
    return lotSize;
  }


  public void setLotSize(Integer lotSize) {
    this.lotSize = lotSize;
  }


  public EbayOfferDetailsWithId merchantLocationKey(String merchantLocationKey) {
    
    this.merchantLocationKey = merchantLocationKey;
    return this;
  }

   /**
   * The unique identifier of a merchant&#39;s inventory location (where the inventory item in the offer is located). A &lt;strong&gt;merchantLocationKey&lt;/strong&gt; value is established when the merchant creates an inventory location using the &lt;strong&gt;createInventoryLocation&lt;/strong&gt; call. To get more information about inventory locations, the &lt;strong&gt;getInventoryLocation&lt;/strong&gt; call can be used.&lt;br/&gt;&lt;br/&gt;This field is not initially required upon first creating an offer, but will become required before an offer can be published.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 36
   * @return merchantLocationKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of a merchant's inventory location (where the inventory item in the offer is located). A <strong>merchantLocationKey</strong> value is established when the merchant creates an inventory location using the <strong>createInventoryLocation</strong> call. To get more information about inventory locations, the <strong>getInventoryLocation</strong> call can be used.<br/><br/>This field is not initially required upon first creating an offer, but will become required before an offer can be published.<br/><br/><b>Max length</b>: 36")

  public String getMerchantLocationKey() {
    return merchantLocationKey;
  }


  public void setMerchantLocationKey(String merchantLocationKey) {
    this.merchantLocationKey = merchantLocationKey;
  }


  public EbayOfferDetailsWithId pricingSummary(PricingSummary pricingSummary) {
    
    this.pricingSummary = pricingSummary;
    return this;
  }

   /**
   * Get pricingSummary
   * @return pricingSummary
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public PricingSummary getPricingSummary() {
    return pricingSummary;
  }


  public void setPricingSummary(PricingSummary pricingSummary) {
    this.pricingSummary = pricingSummary;
  }


  public EbayOfferDetailsWithId quantityLimitPerBuyer(Integer quantityLimitPerBuyer) {
    
    this.quantityLimitPerBuyer = quantityLimitPerBuyer;
    return this;
  }

   /**
   * This field is only applicable and set if the seller wishes to set a restriction on the purchase quantity per seller. If this field is set by the seller for the offer, then each distinct buyer may purchase up to, but not exceeding the quantity specified for this field. So, if this field&#39;s value is &lt;code&gt;5&lt;/code&gt;, each buyer may purchase between one to five of these products, and the purchases can occur in one multiple-quantity purchase, or over multiple transactions. If a buyer attempts to purchase one or more of these products, and the cumulative quantity will take the buyer beyond the quantity limit, that buyer will be blocked from that purchase.&lt;br&gt;&lt;br&gt;If this field currently exists for an unpublished or published offer, it should be provided again in an &lt;strong&gt;updateOffer&lt;/strong&gt; call, even if the value is not changing.&lt;br/&gt;
   * @return quantityLimitPerBuyer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field is only applicable and set if the seller wishes to set a restriction on the purchase quantity per seller. If this field is set by the seller for the offer, then each distinct buyer may purchase up to, but not exceeding the quantity specified for this field. So, if this field's value is <code>5</code>, each buyer may purchase between one to five of these products, and the purchases can occur in one multiple-quantity purchase, or over multiple transactions. If a buyer attempts to purchase one or more of these products, and the cumulative quantity will take the buyer beyond the quantity limit, that buyer will be blocked from that purchase.<br><br>If this field currently exists for an unpublished or published offer, it should be provided again in an <strong>updateOffer</strong> call, even if the value is not changing.<br/>")

  public Integer getQuantityLimitPerBuyer() {
    return quantityLimitPerBuyer;
  }


  public void setQuantityLimitPerBuyer(Integer quantityLimitPerBuyer) {
    this.quantityLimitPerBuyer = quantityLimitPerBuyer;
  }


  public EbayOfferDetailsWithId secondaryCategoryId(String secondaryCategoryId) {
    
    this.secondaryCategoryId = secondaryCategoryId;
    return this;
  }

   /**
   * The unique identifier for a secondary category. This field is applicable if the seller decides to list the item under two categories. Sellers can use the &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getCategorySuggestions\&quot; target&#x3D;\&quot;_blank\&quot;&gt;getCategorySuggestions&lt;/a&gt; method of the Taxonomy API to retrieve suggested category ID values. A fee may be charged when adding a secondary category to a listing. &lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; You cannot list &lt;strong&gt;US eBay Motors&lt;/strong&gt; vehicles in two categories. However, you can list &lt;strong&gt;Parts &amp; Accessories&lt;/strong&gt; in two categories.&lt;/span&gt;
   * @return secondaryCategoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier for a secondary category. This field is applicable if the seller decides to list the item under two categories. Sellers can use the <a href=\"/api-docs/commerce/taxonomy/resources/category_tree/methods/getCategorySuggestions\" target=\"_blank\">getCategorySuggestions</a> method of the Taxonomy API to retrieve suggested category ID values. A fee may be charged when adding a secondary category to a listing. <br/><br/><span class=\"tablenote\"><strong>Note:</strong> You cannot list <strong>US eBay Motors</strong> vehicles in two categories. However, you can list <strong>Parts & Accessories</strong> in two categories.</span>")

  public String getSecondaryCategoryId() {
    return secondaryCategoryId;
  }


  public void setSecondaryCategoryId(String secondaryCategoryId) {
    this.secondaryCategoryId = secondaryCategoryId;
  }


  public EbayOfferDetailsWithId storeCategoryNames(List<String> storeCategoryNames) {
    
    this.storeCategoryNames = storeCategoryNames;
    return this;
  }

  public EbayOfferDetailsWithId addStoreCategoryNamesItem(String storeCategoryNamesItem) {
    if (this.storeCategoryNames == null) {
      this.storeCategoryNames = new ArrayList<String>();
    }
    this.storeCategoryNames.add(storeCategoryNamesItem);
    return this;
  }

   /**
   * This container is used if the seller would like to place the inventory item into one or two store categories that the seller has set up for their eBay store. The string value(s) passed in to this container will be the full path(s) to the store categories, as shown below:&lt;br&gt; &lt;pre&gt;&lt;code&gt;\&quot;storeCategoryNames\&quot;: [&lt;br/&gt; \&quot;/Fashion/Men/Shirts\&quot;, &lt;br/&gt; \&quot;/Fashion/Men/Accessories\&quot; ], &lt;/pre&gt;&lt;/code&gt;If this field currently exists for an unpublished or published offer, it should be provided again in an &lt;strong&gt;updateOffer&lt;/strong&gt; call, even if the eBay categories are not changing.
   * @return storeCategoryNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This container is used if the seller would like to place the inventory item into one or two store categories that the seller has set up for their eBay store. The string value(s) passed in to this container will be the full path(s) to the store categories, as shown below:<br> <pre><code>\"storeCategoryNames\": [<br/> \"/Fashion/Men/Shirts\", <br/> \"/Fashion/Men/Accessories\" ], </pre></code>If this field currently exists for an unpublished or published offer, it should be provided again in an <strong>updateOffer</strong> call, even if the eBay categories are not changing.")

  public List<String> getStoreCategoryNames() {
    return storeCategoryNames;
  }


  public void setStoreCategoryNames(List<String> storeCategoryNames) {
    this.storeCategoryNames = storeCategoryNames;
  }


  public EbayOfferDetailsWithId tax(Tax tax) {
    
    this.tax = tax;
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Tax getTax() {
    return tax;
  }


  public void setTax(Tax tax) {
    this.tax = tax;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EbayOfferDetailsWithId ebayOfferDetailsWithId = (EbayOfferDetailsWithId) o;
    return Objects.equals(this.availableQuantity, ebayOfferDetailsWithId.availableQuantity) &&
        Objects.equals(this.categoryId, ebayOfferDetailsWithId.categoryId) &&
        Objects.equals(this.charity, ebayOfferDetailsWithId.charity) &&
        Objects.equals(this.extendedProducerResponsibility, ebayOfferDetailsWithId.extendedProducerResponsibility) &&
        Objects.equals(this.hideBuyerDetails, ebayOfferDetailsWithId.hideBuyerDetails) &&
        Objects.equals(this.includeCatalogProductDetails, ebayOfferDetailsWithId.includeCatalogProductDetails) &&
        Objects.equals(this.listingDescription, ebayOfferDetailsWithId.listingDescription) &&
        Objects.equals(this.listingDuration, ebayOfferDetailsWithId.listingDuration) &&
        Objects.equals(this.listingPolicies, ebayOfferDetailsWithId.listingPolicies) &&
        Objects.equals(this.listingStartDate, ebayOfferDetailsWithId.listingStartDate) &&
        Objects.equals(this.lotSize, ebayOfferDetailsWithId.lotSize) &&
        Objects.equals(this.merchantLocationKey, ebayOfferDetailsWithId.merchantLocationKey) &&
        Objects.equals(this.pricingSummary, ebayOfferDetailsWithId.pricingSummary) &&
        Objects.equals(this.quantityLimitPerBuyer, ebayOfferDetailsWithId.quantityLimitPerBuyer) &&
        Objects.equals(this.secondaryCategoryId, ebayOfferDetailsWithId.secondaryCategoryId) &&
        Objects.equals(this.storeCategoryNames, ebayOfferDetailsWithId.storeCategoryNames) &&
        Objects.equals(this.tax, ebayOfferDetailsWithId.tax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, categoryId, charity, extendedProducerResponsibility, hideBuyerDetails, includeCatalogProductDetails, listingDescription, listingDuration, listingPolicies, listingStartDate, lotSize, merchantLocationKey, pricingSummary, quantityLimitPerBuyer, secondaryCategoryId, storeCategoryNames, tax);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EbayOfferDetailsWithId {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    charity: ").append(toIndentedString(charity)).append("\n");
    sb.append("    extendedProducerResponsibility: ").append(toIndentedString(extendedProducerResponsibility)).append("\n");
    sb.append("    hideBuyerDetails: ").append(toIndentedString(hideBuyerDetails)).append("\n");
    sb.append("    includeCatalogProductDetails: ").append(toIndentedString(includeCatalogProductDetails)).append("\n");
    sb.append("    listingDescription: ").append(toIndentedString(listingDescription)).append("\n");
    sb.append("    listingDuration: ").append(toIndentedString(listingDuration)).append("\n");
    sb.append("    listingPolicies: ").append(toIndentedString(listingPolicies)).append("\n");
    sb.append("    listingStartDate: ").append(toIndentedString(listingStartDate)).append("\n");
    sb.append("    lotSize: ").append(toIndentedString(lotSize)).append("\n");
    sb.append("    merchantLocationKey: ").append(toIndentedString(merchantLocationKey)).append("\n");
    sb.append("    pricingSummary: ").append(toIndentedString(pricingSummary)).append("\n");
    sb.append("    quantityLimitPerBuyer: ").append(toIndentedString(quantityLimitPerBuyer)).append("\n");
    sb.append("    secondaryCategoryId: ").append(toIndentedString(secondaryCategoryId)).append("\n");
    sb.append("    storeCategoryNames: ").append(toIndentedString(storeCategoryNames)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

