/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nextop.ebay.client.model.Amount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This container defines the criteria for when the discounts of a promotion trigger, such as the minimum quantity the buyer must purchase before the promotion kicks in. The promotional discount is applied each time the criteria defined by this container is met.  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When configuring the rules that govern when the discounts are applied, populate just one of the following fields in the &lt;b&gt;discountSpecification&lt;/b&gt; container:&lt;/p&gt;  &lt;ul&gt;&lt;li&gt;&lt;b&gt;minAmount&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;minQuantity&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;forEachQuantity&lt;/b&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;forEachAmount&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Tip:&lt;/b&gt; Refer to &lt;a href&#x3D;\&quot;/api-docs/sell/static/marketing/pm-specifying-discounts.html\&quot;&gt;Configuring discounts for threshold promotions&lt;/a&gt; for information and examples on how to combine &lt;b&gt;discountBenefit&lt;/b&gt; and &lt;b&gt;discountSpecification&lt;/b&gt; to create different types of promotions.&lt;/p&gt;
 */
@ApiModel(description = "This container defines the criteria for when the discounts of a promotion trigger, such as the minimum quantity the buyer must purchase before the promotion kicks in. The promotional discount is applied each time the criteria defined by this container is met.  <p><b>Note:</b> When configuring the rules that govern when the discounts are applied, populate just one of the following fields in the <b>discountSpecification</b> container:</p>  <ul><li><b>minAmount</b></li> <li><b>minQuantity</b></li> <li><b>forEachQuantity</b></li> <li><b>forEachAmount</b></li></ul> <p class=\"tablenote\"><b>Tip:</b> Refer to <a href=\"/api-docs/sell/static/marketing/pm-specifying-discounts.html\">Configuring discounts for threshold promotions</a> for information and examples on how to combine <b>discountBenefit</b> and <b>discountSpecification</b> to create different types of promotions.</p>")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class DiscountSpecification implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FOR_EACH_AMOUNT = "forEachAmount";
  @SerializedName(SERIALIZED_NAME_FOR_EACH_AMOUNT)
  private Amount forEachAmount;

  public static final String SERIALIZED_NAME_FOR_EACH_QUANTITY = "forEachQuantity";
  @SerializedName(SERIALIZED_NAME_FOR_EACH_QUANTITY)
  private Integer forEachQuantity;

  public static final String SERIALIZED_NAME_MIN_AMOUNT = "minAmount";
  @SerializedName(SERIALIZED_NAME_MIN_AMOUNT)
  private Amount minAmount;

  public static final String SERIALIZED_NAME_MIN_QUANTITY = "minQuantity";
  @SerializedName(SERIALIZED_NAME_MIN_QUANTITY)
  private Integer minQuantity;

  public static final String SERIALIZED_NAME_NUMBER_OF_DISCOUNTED_ITEMS = "numberOfDiscountedItems";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DISCOUNTED_ITEMS)
  private Integer numberOfDiscountedItems;


  public DiscountSpecification forEachAmount(Amount forEachAmount) {
    
    this.forEachAmount = forEachAmount;
    return this;
  }

   /**
   * Get forEachAmount
   * @return forEachAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Amount getForEachAmount() {
    return forEachAmount;
  }


  public void setForEachAmount(Amount forEachAmount) {
    this.forEachAmount = forEachAmount;
  }


  public DiscountSpecification forEachQuantity(Integer forEachQuantity) {
    
    this.forEachQuantity = forEachQuantity;
    return this;
  }

   /**
   * The number of items that must be purchased in order to qualify for the discount.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Valid values:&lt;/b&gt; &lt;br&gt;&lt;code&gt; &amp;nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, &lt;br&gt; &amp;nbsp; 12, 13, 14, 15, 16, 17, 18, 19 &lt;br&gt; &amp;nbsp; 20, 25, 50, 75, 100&lt;/code&gt;
   * @return forEachQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of items that must be purchased in order to qualify for the discount.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, <br> &nbsp; 12, 13, 14, 15, 16, 17, 18, 19 <br> &nbsp; 20, 25, 50, 75, 100</code>")

  public Integer getForEachQuantity() {
    return forEachQuantity;
  }


  public void setForEachQuantity(Integer forEachQuantity) {
    this.forEachQuantity = forEachQuantity;
  }


  public DiscountSpecification minAmount(Amount minAmount) {
    
    this.minAmount = minAmount;
    return this;
  }

   /**
   * Get minAmount
   * @return minAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public Amount getMinAmount() {
    return minAmount;
  }


  public void setMinAmount(Amount minAmount) {
    this.minAmount = minAmount;
  }


  public DiscountSpecification minQuantity(Integer minQuantity) {
    
    this.minQuantity = minQuantity;
    return this;
  }

   /**
   * The minimum quantity of promoted items that needs to be bought in order to qualify for the promotion&#39;s discount.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Valid values:&lt;/b&gt; &lt;br&gt;&lt;code&gt; &amp;nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, &lt;br&gt; &amp;nbsp; 12, 13, 14, 15, 16, 17, 18, 19 &lt;br&gt; &amp;nbsp; 20, 25, 50, 75, 100&lt;/code&gt;
   * @return minQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum quantity of promoted items that needs to be bought in order to qualify for the promotion's discount.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, <br> &nbsp; 12, 13, 14, 15, 16, 17, 18, 19 <br> &nbsp; 20, 25, 50, 75, 100</code>")

  public Integer getMinQuantity() {
    return minQuantity;
  }


  public void setMinQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
  }


  public DiscountSpecification numberOfDiscountedItems(Integer numberOfDiscountedItems) {
    
    this.numberOfDiscountedItems = numberOfDiscountedItems;
    return this;
  }

   /**
   * Use this field to configure \&quot;Buy One Get One\&quot; (or &lt;b&gt;BOGO&lt;/b&gt;) promotions.  &lt;br&gt;&lt;br&gt;You must couple this field with &lt;b&gt;forEachQuantity&lt;/b&gt; and an &lt;b&gt;amountOffItem&lt;/b&gt; or &lt;b&gt;percentOffItem&lt;/b&gt; field to configure your BOGO promotion. This field is not valid with order-based promotions. &lt;br&gt;&lt;br&gt;The value of this field represents the number of items to be discounted when other promotion criteria is met. For example, when the buyer adds the number of items identified by the &lt;b&gt;forEachQuantity&lt;/b&gt; value to their cart, they are then eligible to receive the stated discount from an additional number of like items (the number of which is identified by this field) when they add those items to their cart. To receive the discount, the buyer must purchase the number of items indicated by  &lt;b&gt;forEachQuantity&lt;/b&gt; &lt;i&gt;plus&lt;/i&gt; the number indicated by this field.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Valid values:&lt;/b&gt; &lt;br&gt;&lt;code&gt; &amp;nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10&lt;/code&gt;
   * @return numberOfDiscountedItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use this field to configure \"Buy One Get One\" (or <b>BOGO</b>) promotions.  <br><br>You must couple this field with <b>forEachQuantity</b> and an <b>amountOffItem</b> or <b>percentOffItem</b> field to configure your BOGO promotion. This field is not valid with order-based promotions. <br><br>The value of this field represents the number of items to be discounted when other promotion criteria is met. For example, when the buyer adds the number of items identified by the <b>forEachQuantity</b> value to their cart, they are then eligible to receive the stated discount from an additional number of like items (the number of which is identified by this field) when they add those items to their cart. To receive the discount, the buyer must purchase the number of items indicated by  <b>forEachQuantity</b> <i>plus</i> the number indicated by this field.  <br><br><b>Valid values:</b> <br><code> &nbsp; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</code>")

  public Integer getNumberOfDiscountedItems() {
    return numberOfDiscountedItems;
  }


  public void setNumberOfDiscountedItems(Integer numberOfDiscountedItems) {
    this.numberOfDiscountedItems = numberOfDiscountedItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscountSpecification discountSpecification = (DiscountSpecification) o;
    return Objects.equals(this.forEachAmount, discountSpecification.forEachAmount) &&
        Objects.equals(this.forEachQuantity, discountSpecification.forEachQuantity) &&
        Objects.equals(this.minAmount, discountSpecification.minAmount) &&
        Objects.equals(this.minQuantity, discountSpecification.minQuantity) &&
        Objects.equals(this.numberOfDiscountedItems, discountSpecification.numberOfDiscountedItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forEachAmount, forEachQuantity, minAmount, minQuantity, numberOfDiscountedItems);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscountSpecification {\n");
    sb.append("    forEachAmount: ").append(toIndentedString(forEachAmount)).append("\n");
    sb.append("    forEachQuantity: ").append(toIndentedString(forEachQuantity)).append("\n");
    sb.append("    minAmount: ").append(toIndentedString(minAmount)).append("\n");
    sb.append("    minQuantity: ").append(toIndentedString(minQuantity)).append("\n");
    sb.append("    numberOfDiscountedItems: ").append(toIndentedString(numberOfDiscountedItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

