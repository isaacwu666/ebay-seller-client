/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nextop.ebay.client.model.NameValueList;
import com.nextop.ebay.client.model.ProductFamilyProperties;
import com.nextop.ebay.client.model.ProductIdentifier;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This type is used to specify/indicate the motor vehicles that are compatible with the corresponding inventory item. 
 */
@ApiModel(description = "This type is used to specify/indicate the motor vehicles that are compatible with the corresponding inventory item. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class CompatibleProduct implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_COMPATIBILITY_PROPERTIES = "compatibilityProperties";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_PROPERTIES)
  private List<NameValueList> compatibilityProperties = null;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PRODUCT_FAMILY_PROPERTIES = "productFamilyProperties";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FAMILY_PROPERTIES)
  private ProductFamilyProperties productFamilyProperties;

  public static final String SERIALIZED_NAME_PRODUCT_IDENTIFIER = "productIdentifier";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDENTIFIER)
  private ProductIdentifier productIdentifier;


  public CompatibleProduct compatibilityProperties(List<NameValueList> compatibilityProperties) {
    
    this.compatibilityProperties = compatibilityProperties;
    return this;
  }

  public CompatibleProduct addCompatibilityPropertiesItem(NameValueList compatibilityPropertiesItem) {
    if (this.compatibilityProperties == null) {
      this.compatibilityProperties = new ArrayList<NameValueList>();
    }
    this.compatibilityProperties.add(compatibilityPropertiesItem);
    return this;
  }

   /**
   * This container consists of an array of motor vehicles that are compatible with the motor vehicle part or accessory specified by the SKU value in the call URI. Each motor vehicle is defined through a separate set of name/value pairs. In the &lt;strong&gt;name&lt;/strong&gt; field, the vehicle aspect (such as &#39;make&#39;, &#39;model&#39;, &#39;year&#39;, &#39;trim&#39;, or &#39;engine&#39;) will be identified, and the &lt;strong&gt;value&lt;/strong&gt; field will be used to identify the value of each aspect. The &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getCompatibilityProperties\&quot;&gt;getCompatibilityProperties&lt;/a&gt; method of the Taxonomy API can be used to retrieve applicable vehicle aspect names for a specified category, and the &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getCompatibilityPropertyValues\&quot;&gt;getCompatibilityPropertyValues&lt;/a&gt; method of the Taxonomy API can be used to retrieve possible values for these same vehicle aspect names. Below is an example of identifying one motor vehicle using the &lt;strong&gt;compatibilityProperties&lt;/strong&gt; container:&lt;br&gt;&lt;br&gt;&lt;code&gt;&amp;quot;compatibilityProperties&amp;quot; : &amp;#91;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;make&amp;quot;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; : &amp;quot;Subaru&amp;quot;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#125;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;model&amp;quot;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; : &amp;quot;GL&amp;quot;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#125;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;year&amp;quot;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; : &amp;quot;1983&amp;quot;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#125;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;trim&amp;quot;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; : &amp;quot;Base Wagon 4-Door&amp;quot;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#125;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;name&amp;quot; : &amp;quot;engine&amp;quot;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot; : &amp;quot;1.8L Turbocharged&amp;quot;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;#125;&lt;br&gt;&amp;#93;&lt;/code&gt;&lt;br&gt;&lt;br&gt;Typically, the make, model, and year of the motor vehicle are always required, with the trim and engine being necessary sometimes, but it will be dependent on the part or accessory, and on the vehicle class.&lt;br/&gt;&lt;br/&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; The &lt;strong&gt;productFamilyProperties&lt;/strong&gt; container is in the process of being deprecated and will no longer be supported in February of 2021, so if you are a new user of &lt;strong&gt;createOrReplaceProductCompatibility&lt;/strong&gt;, you should use the &lt;strong&gt;compatibilityProperties&lt;/strong&gt; container instead, and if you are already integrated and using the &lt;strong&gt;productFamilyProperties&lt;/strong&gt; container, you should make plans to migrate to &lt;strong&gt;compatibilityProperties&lt;/strong&gt;. The &lt;strong&gt;productFamilyProperties&lt;/strong&gt; and &lt;strong&gt;compatibilityProperties&lt;/strong&gt; containers may not be used together or the call will fail.&lt;/span&gt;
   * @return compatibilityProperties
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "This container consists of an array of motor vehicles that are compatible with the motor vehicle part or accessory specified by the SKU value in the call URI. Each motor vehicle is defined through a separate set of name/value pairs. In the <strong>name</strong> field, the vehicle aspect (such as 'make', 'model', 'year', 'trim', or 'engine') will be identified, and the <strong>value</strong> field will be used to identify the value of each aspect. The <a href=\"/api-docs/commerce/taxonomy/resources/category_tree/methods/getCompatibilityProperties\">getCompatibilityProperties</a> method of the Taxonomy API can be used to retrieve applicable vehicle aspect names for a specified category, and the <a href=\"/api-docs/commerce/taxonomy/resources/category_tree/methods/getCompatibilityPropertyValues\">getCompatibilityPropertyValues</a> method of the Taxonomy API can be used to retrieve possible values for these same vehicle aspect names. Below is an example of identifying one motor vehicle using the <strong>compatibilityProperties</strong> container:<br><br><code>&quot;compatibilityProperties&quot; : &#91;<br>&nbsp;&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;make&quot;,<br>&nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;Subaru&quot;<br>&nbsp;&nbsp;&#125;,<br>&nbsp;&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;model&quot;,<br>&nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;GL&quot;<br>&nbsp;&nbsp;&#125;,<br>&nbsp;&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;year&quot;,<br>&nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;1983&quot;<br>&nbsp;&nbsp;&#125;,<br>&nbsp;&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;trim&quot;,<br>&nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;Base Wagon 4-Door&quot;<br>&nbsp;&nbsp;&#125;,<br>&nbsp;&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;engine&quot;,<br>&nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;1.8L Turbocharged&quot;<br>&nbsp;&nbsp;&#125;<br>&#93;</code><br><br>Typically, the make, model, and year of the motor vehicle are always required, with the trim and engine being necessary sometimes, but it will be dependent on the part or accessory, and on the vehicle class.<br/><br/><span class=\"tablenote\"> <strong>Note:</strong> The <strong>productFamilyProperties</strong> container is in the process of being deprecated and will no longer be supported in February of 2021, so if you are a new user of <strong>createOrReplaceProductCompatibility</strong>, you should use the <strong>compatibilityProperties</strong> container instead, and if you are already integrated and using the <strong>productFamilyProperties</strong> container, you should make plans to migrate to <strong>compatibilityProperties</strong>. The <strong>productFamilyProperties</strong> and <strong>compatibilityProperties</strong> containers may not be used together or the call will fail.</span>")

  public List<NameValueList> getCompatibilityProperties() {
    return compatibilityProperties;
  }


  public void setCompatibilityProperties(List<NameValueList> compatibilityProperties) {
    this.compatibilityProperties = compatibilityProperties;
  }


  public CompatibleProduct notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * This field is optionally used by the seller to input any notes pertaining to the compatible vehicle list being defined. The seller might use this field to specify the placement of the part on a vehicle or other applicable information. This field will only be returned if specified by the seller.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Max Length&lt;/strong&gt;: 500&lt;br/&gt;
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This field is optionally used by the seller to input any notes pertaining to the compatible vehicle list being defined. The seller might use this field to specify the placement of the part on a vehicle or other applicable information. This field will only be returned if specified by the seller.<br/><br/><strong>Max Length</strong>: 500<br/>")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


  public CompatibleProduct productFamilyProperties(ProductFamilyProperties productFamilyProperties) {
    
    this.productFamilyProperties = productFamilyProperties;
    return this;
  }

   /**
   * Get productFamilyProperties
   * @return productFamilyProperties
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public ProductFamilyProperties getProductFamilyProperties() {
    return productFamilyProperties;
  }


  public void setProductFamilyProperties(ProductFamilyProperties productFamilyProperties) {
    this.productFamilyProperties = productFamilyProperties;
  }


  public CompatibleProduct productIdentifier(ProductIdentifier productIdentifier) {
    
    this.productIdentifier = productIdentifier;
    return this;
  }

   /**
   * Get productIdentifier
   * @return productIdentifier
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")

  public ProductIdentifier getProductIdentifier() {
    return productIdentifier;
  }


  public void setProductIdentifier(ProductIdentifier productIdentifier) {
    this.productIdentifier = productIdentifier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompatibleProduct compatibleProduct = (CompatibleProduct) o;
    return Objects.equals(this.compatibilityProperties, compatibleProduct.compatibilityProperties) &&
        Objects.equals(this.notes, compatibleProduct.notes) &&
        Objects.equals(this.productFamilyProperties, compatibleProduct.productFamilyProperties) &&
        Objects.equals(this.productIdentifier, compatibleProduct.productIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatibilityProperties, notes, productFamilyProperties, productIdentifier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompatibleProduct {\n");
    sb.append("    compatibilityProperties: ").append(toIndentedString(compatibilityProperties)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    productFamilyProperties: ").append(toIndentedString(productFamilyProperties)).append("\n");
    sb.append("    productIdentifier: ").append(toIndentedString(productIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

