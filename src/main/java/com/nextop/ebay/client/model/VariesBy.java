/*
 * ebay官方api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nextop.ebay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nextop.ebay.client.model.Specification;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * This type is used to specify the product aspect(s) where individual items of the group vary, as well as a list of the available variations of those aspects.
 */
@ApiModel(description = "This type is used to specify the product aspect(s) where individual items of the group vary, as well as a list of the available variations of those aspects.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T14:51:10.412+08:00[Asia/Shanghai]")
public class VariesBy implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ASPECTS_IMAGE_VARIES_BY = "aspectsImageVariesBy";
  @SerializedName(SERIALIZED_NAME_ASPECTS_IMAGE_VARIES_BY)
  private List<String> aspectsImageVariesBy = null;

  public static final String SERIALIZED_NAME_SPECIFICATIONS = "specifications";
  @SerializedName(SERIALIZED_NAME_SPECIFICATIONS)
  private List<Specification> specifications = null;


  public VariesBy aspectsImageVariesBy(List<String> aspectsImageVariesBy) {
    
    this.aspectsImageVariesBy = aspectsImageVariesBy;
    return this;
  }

  public VariesBy addAspectsImageVariesByItem(String aspectsImageVariesByItem) {
    if (this.aspectsImageVariesBy == null) {
      this.aspectsImageVariesBy = new ArrayList<String>();
    }
    this.aspectsImageVariesBy.add(aspectsImageVariesByItem);
    return this;
  }

   /**
   * This container is used if the seller wants to include multiple images to demonstrate how variations within a multiple-variation listing differ. In this string field, the seller will specify the product aspect where the variations of the inventory item group vary, such as color. If &lt;code&gt;Color&lt;/code&gt; is specified in this field, &lt;code&gt;Color&lt;/code&gt; must also be one of the &lt;strong&gt;specifications.name&lt;/strong&gt; values, and all available colors must appear in the corresponding &lt;strong&gt;specifications.values&lt;/strong&gt; array.&lt;br&gt;&lt;br&gt;If the &lt;strong&gt;aspectsImageVariesBy&lt;/strong&gt; container is used, links to images of each variation should be specified through the &lt;strong&gt;imageUrls&lt;/strong&gt; container of the inventory item group, or the seller can choose to include those links to images in each inventory item record for the inventory items in the group.
   * @return aspectsImageVariesBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This container is used if the seller wants to include multiple images to demonstrate how variations within a multiple-variation listing differ. In this string field, the seller will specify the product aspect where the variations of the inventory item group vary, such as color. If <code>Color</code> is specified in this field, <code>Color</code> must also be one of the <strong>specifications.name</strong> values, and all available colors must appear in the corresponding <strong>specifications.values</strong> array.<br><br>If the <strong>aspectsImageVariesBy</strong> container is used, links to images of each variation should be specified through the <strong>imageUrls</strong> container of the inventory item group, or the seller can choose to include those links to images in each inventory item record for the inventory items in the group.")

  public List<String> getAspectsImageVariesBy() {
    return aspectsImageVariesBy;
  }


  public void setAspectsImageVariesBy(List<String> aspectsImageVariesBy) {
    this.aspectsImageVariesBy = aspectsImageVariesBy;
  }


  public VariesBy specifications(List<Specification> specifications) {
    
    this.specifications = specifications;
    return this;
  }

  public VariesBy addSpecificationsItem(Specification specificationsItem) {
    if (this.specifications == null) {
      this.specifications = new ArrayList<Specification>();
    }
    this.specifications.add(specificationsItem);
    return this;
  }

   /**
   * This container consists of an array of one or more product aspects where each variation differs, and values for each of those product aspects. This container is not immediately required, but will be required before the first offer of the inventory item group is published. &lt;br&gt;&lt;br&gt;If a product aspect is specified in the &lt;strong&gt;aspectsImageVariesBy&lt;/strong&gt; container, this product aspect (along with all variations of that product aspect) must be included in the &lt;strong&gt;specifications&lt;/strong&gt; container. Before offers related to the inventory item group are published, the product aspects and values specified through the &lt;strong&gt;specifications&lt;/strong&gt; container should be in synch with the name-value pairs specified through the &lt;strong&gt;product.aspects&lt;/strong&gt; containers of the inventory items contained in the group. For example, if &lt;code&gt;Color&lt;/code&gt; and &lt;code&gt;Size&lt;/code&gt; are in this &lt;strong&gt;specifications&lt;/strong&gt; container, each inventory item of the group should also have &lt;code&gt;Color&lt;/code&gt; and &lt;code&gt;Size&lt;/code&gt; as aspect names in their inventory item records.&lt;br&gt;&lt;br/&gt;This container is always returned if one or more offers associated with the inventory item group have been published. For inventory item groups that have yet to have any published offers, this container is only returned if set.
   * @return specifications
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "This container consists of an array of one or more product aspects where each variation differs, and values for each of those product aspects. This container is not immediately required, but will be required before the first offer of the inventory item group is published. <br><br>If a product aspect is specified in the <strong>aspectsImageVariesBy</strong> container, this product aspect (along with all variations of that product aspect) must be included in the <strong>specifications</strong> container. Before offers related to the inventory item group are published, the product aspects and values specified through the <strong>specifications</strong> container should be in synch with the name-value pairs specified through the <strong>product.aspects</strong> containers of the inventory items contained in the group. For example, if <code>Color</code> and <code>Size</code> are in this <strong>specifications</strong> container, each inventory item of the group should also have <code>Color</code> and <code>Size</code> as aspect names in their inventory item records.<br><br/>This container is always returned if one or more offers associated with the inventory item group have been published. For inventory item groups that have yet to have any published offers, this container is only returned if set.")

  public List<Specification> getSpecifications() {
    return specifications;
  }


  public void setSpecifications(List<Specification> specifications) {
    this.specifications = specifications;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariesBy variesBy = (VariesBy) o;
    return Objects.equals(this.aspectsImageVariesBy, variesBy.aspectsImageVariesBy) &&
        Objects.equals(this.specifications, variesBy.specifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectsImageVariesBy, specifications);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariesBy {\n");
    sb.append("    aspectsImageVariesBy: ").append(toIndentedString(aspectsImageVariesBy)).append("\n");
    sb.append("    specifications: ").append(toIndentedString(specifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

